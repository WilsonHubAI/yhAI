// Code generated by MockGen. DO NOT EDIT.
// Source: cipher.go

// Package cryptoMock is a generated GoMock package.
package cryptoMock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCryptoCipher is a mock of CryptoCipher interface.
type MockCryptoCipher struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoCipherMockRecorder
}

// MockCryptoCipherMockRecorder is the mock recorder for MockCryptoCipher.
type MockCryptoCipherMockRecorder struct {
	mock *MockCryptoCipher
}

// NewMockCryptoCipher creates a new mock instance.
func NewMockCryptoCipher(ctrl *gomock.Controller) *MockCryptoCipher {
	mock := &MockCryptoCipher{ctrl: ctrl}
	mock.recorder = &MockCryptoCipherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoCipher) EXPECT() *MockCryptoCipherMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCryptoCipher) Decrypt(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCryptoCipherMockRecorder) Decrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCryptoCipher)(nil).Decrypt), arg0)
}

// Encrypt mocks base method.
func (m *MockCryptoCipher) Encrypt(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCryptoCipherMockRecorder) Encrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCryptoCipher)(nil).Encrypt), arg0)
}

// Marshal mocks base method.
func (m *MockCryptoCipher) Marshal(arg0 any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockCryptoCipherMockRecorder) Marshal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockCryptoCipher)(nil).Marshal), arg0)
}

// Unmarshal mocks base method.
func (m *MockCryptoCipher) Unmarshal(arg0 []byte, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockCryptoCipherMockRecorder) Unmarshal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockCryptoCipher)(nil).Unmarshal), arg0, arg1)
}

// MockObjectMarshaler is a mock of ObjectMarshaler interface.
type MockObjectMarshaler struct {
	ctrl     *gomock.Controller
	recorder *MockObjectMarshalerMockRecorder
}

// MockObjectMarshalerMockRecorder is the mock recorder for MockObjectMarshaler.
type MockObjectMarshalerMockRecorder struct {
	mock *MockObjectMarshaler
}

// NewMockObjectMarshaler creates a new mock instance.
func NewMockObjectMarshaler(ctrl *gomock.Controller) *MockObjectMarshaler {
	mock := &MockObjectMarshaler{ctrl: ctrl}
	mock.recorder = &MockObjectMarshalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectMarshaler) EXPECT() *MockObjectMarshalerMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockObjectMarshaler) Marshal(arg0 any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockObjectMarshalerMockRecorder) Marshal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockObjectMarshaler)(nil).Marshal), arg0)
}

// Unmarshal mocks base method.
func (m *MockObjectMarshaler) Unmarshal(arg0 []byte, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockObjectMarshalerMockRecorder) Unmarshal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockObjectMarshaler)(nil).Unmarshal), arg0, arg1)
}
