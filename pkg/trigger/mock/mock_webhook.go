// Code generated by MockGen. DO NOT EDIT.
// Source: webhook.go

// Package mockTrigger is a generated GoMock package.
package mockTrigger

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auth "jihulab.com/jihulab/ultrafox/ultrafox/pkg/auth"
	log "jihulab.com/jihulab/ultrafox/ultrafox/pkg/log"
	trigger "jihulab.com/jihulab/ultrafox/ultrafox/pkg/trigger"
)

// MockWebhookContext is a mock of WebhookContext interface.
type MockWebhookContext struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookContextMockRecorder
}

// MockWebhookContextMockRecorder is the mock recorder for MockWebhookContext.
type MockWebhookContextMockRecorder struct {
	mock *MockWebhookContext
}

// NewMockWebhookContext creates a new mock instance.
func NewMockWebhookContext(ctrl *gomock.Controller) *MockWebhookContext {
	mock := &MockWebhookContext{ctrl: ctrl}
	mock.recorder = &MockWebhookContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookContext) EXPECT() *MockWebhookContextMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockWebhookContext) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWebhookContextMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWebhookContext)(nil).Context))
}

// DPanic mocks base method.
func (m *MockWebhookContext) DPanic(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DPanic", varargs...)
}

// DPanic indicates an expected call of DPanic.
func (mr *MockWebhookContextMockRecorder) DPanic(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DPanic", reflect.TypeOf((*MockWebhookContext)(nil).DPanic), varargs...)
}

// Debug mocks base method.
func (m *MockWebhookContext) Debug(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockWebhookContextMockRecorder) Debug(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockWebhookContext)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockWebhookContext) Error(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockWebhookContextMockRecorder) Error(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockWebhookContext)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockWebhookContext) Fatal(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockWebhookContextMockRecorder) Fatal(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockWebhookContext)(nil).Fatal), varargs...)
}

// For mocks base method.
func (m *MockWebhookContext) For(ctx context.Context) log.Entry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "For", ctx)
	ret0, _ := ret[0].(log.Entry)
	return ret0
}

// For indicates an expected call of For.
func (mr *MockWebhookContextMockRecorder) For(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "For", reflect.TypeOf((*MockWebhookContext)(nil).For), ctx)
}

// GetCredential mocks base method.
func (m *MockWebhookContext) GetAuthorizer() auth.Authorizer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizer")
	ret0, _ := ret[0].(auth.Authorizer)
	return ret0
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockWebhookContextMockRecorder) GetCredential() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizer", reflect.TypeOf((*MockWebhookContext)(nil).GetAuthorizer))
}

// GetConfigObject mocks base method.
func (m *MockWebhookContext) GetConfigObject() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigObject")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetConfigObject indicates an expected call of GetConfigObject.
func (mr *MockWebhookContextMockRecorder) GetConfigObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigObject", reflect.TypeOf((*MockWebhookContext)(nil).GetConfigObject))
}

// GetLevel mocks base method.
func (m *MockWebhookContext) GetLevel() log.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].(log.Level)
	return ret0
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockWebhookContextMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockWebhookContext)(nil).GetLevel))
}

// GetTriggerData mocks base method.
func (m *MockWebhookContext) GetTriggerData() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerData")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetTriggerData indicates an expected call of GetTriggerData.
func (mr *MockWebhookContextMockRecorder) GetTriggerData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerData", reflect.TypeOf((*MockWebhookContext)(nil).GetTriggerData))
}

// GetWebhookURL mocks base method.
func (m *MockWebhookContext) GetWebhookURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWebhookURL indicates an expected call of GetWebhookURL.
func (mr *MockWebhookContextMockRecorder) GetWebhookURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookURL", reflect.TypeOf((*MockWebhookContext)(nil).GetWebhookURL))
}

// Info mocks base method.
func (m *MockWebhookContext) Info(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockWebhookContextMockRecorder) Info(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockWebhookContext)(nil).Info), varargs...)
}

// Panic mocks base method.
func (m *MockWebhookContext) Panic(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic.
func (mr *MockWebhookContextMockRecorder) Panic(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockWebhookContext)(nil).Panic), varargs...)
}

// Print mocks base method.
func (m *MockWebhookContext) Print(level log.Level, msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{level, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Print", varargs...)
}

// Print indicates an expected call of Print.
func (mr *MockWebhookContextMockRecorder) Print(level, msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{level, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockWebhookContext)(nil).Print), varargs...)
}

// SetLevel mocks base method.
func (m *MockWebhookContext) SetLevel(level log.Level) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLevel", level)
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockWebhookContextMockRecorder) SetLevel(level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockWebhookContext)(nil).SetLevel), level)
}

// Warn mocks base method.
func (m *MockWebhookContext) Warn(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockWebhookContextMockRecorder) Warn(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockWebhookContext)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockWebhookContext) With(fields ...log.Field) log.Logger {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockWebhookContextMockRecorder) With(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockWebhookContext)(nil).With), fields...)
}

// WithOptions mocks base method.
func (m *MockWebhookContext) WithOptions(opts ...log.ZapOption) log.Logger {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithOptions", varargs...)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// WithOptions indicates an expected call of WithOptions.
func (mr *MockWebhookContextMockRecorder) WithOptions(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOptions", reflect.TypeOf((*MockWebhookContext)(nil).WithOptions), opts...)
}

// MockWebhookProvider is a mock of TriggerProvider interface.
type MockWebhookProvider struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookProviderMockRecorder
}

// MockWebhookProviderMockRecorder is the mock recorder for MockWebhookProvider.
type MockWebhookProviderMockRecorder struct {
	mock *MockWebhookProvider
}

// NewMockWebhookProvider creates a new mock instance.
func NewMockWebhookProvider(ctrl *gomock.Controller) *MockWebhookProvider {
	mock := &MockWebhookProvider{ctrl: ctrl}
	mock.recorder = &MockWebhookProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookProvider) EXPECT() *MockWebhookProviderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWebhookProvider) Create(c trigger.WebhookContext) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWebhookProviderMockRecorder) Create(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWebhookProvider)(nil).Create), c)
}

// Delete mocks base method.
func (m *MockWebhookProvider) Delete(c trigger.WebhookContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWebhookProviderMockRecorder) Delete(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWebhookProvider)(nil).Delete), c)
}

// Exists mocks base method.
func (m *MockWebhookProvider) Exists(c trigger.WebhookContext) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", c)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockWebhookProviderMockRecorder) Exists(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockWebhookProvider)(nil).Exists), c)
}

// FieldsCreated mocks base method.
func (m *MockWebhookProvider) FieldsCreated() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldsCreated")
	ret0, _ := ret[0].([]string)
	return ret0
}

// FieldsCreated indicates an expected call of FieldsCreated.
func (mr *MockWebhookProviderMockRecorder) FieldsCreated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldsCreated", reflect.TypeOf((*MockWebhookProvider)(nil).FieldsCreated))
}

// FieldsDeleted mocks base method.
func (m *MockWebhookProvider) FieldsDeleted() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldsDeleted")
	ret0, _ := ret[0].([]string)
	return ret0
}

// FieldsDeleted indicates an expected call of FieldsDeleted.
func (mr *MockWebhookProviderMockRecorder) FieldsDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldsDeleted", reflect.TypeOf((*MockWebhookProvider)(nil).FieldsDeleted))
}

// GetConfigObject mocks base method.
func (m *MockWebhookProvider) GetConfigObject() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigObject")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetConfigObject indicates an expected call of GetConfigObject.
func (mr *MockWebhookProviderMockRecorder) GetConfigObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigObject", reflect.TypeOf((*MockWebhookProvider)(nil).GetConfigObject))
}
